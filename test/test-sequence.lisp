(in-suite utils)

(def-suite* sequence :in utils)

(test with-lengths
  ;; Zero operands
  (is (= (utils:with-lengths () () 3) 3))
  ;; One operand
  (is (= (utils:with-lengths (n) ('()) n) 0))
  (is (= (utils:with-lengths (n) ('(1)) n) 1))
  (is (= (utils:with-lengths (n) ('(1 2)) n) 2))
  (is (= (utils:with-lengths (n) ('(1 2 3)) n) 3))
  ;; Two operands
  (is (= (utils:with-lengths (n m) ('() '()) (declare (ignorable m)) n) 0))
  (is (= (utils:with-lengths (n m) ('() '(1)) (declare (ignorable m)) n) 0))
  (is (= (utils:with-lengths (n m) ('() '(1 2)) (declare (ignorable m)) n) 0))
  (is (= (utils:with-lengths (n m) ('() '(1 2 3)) (declare (ignorable m)) n) 0))
  (is (= (utils:with-lengths (n m) ('(1) '()) (declare (ignorable m)) n) 1))
  (is (= (utils:with-lengths (n m) ('(1) '(1)) (declare (ignorable m)) n) 1))
  (is (= (utils:with-lengths (n m) ('(1) '(1 2)) (declare (ignorable m)) n) 1))
  (is (= (utils:with-lengths (n m) ('(1) '(1 2 3)) (declare (ignorable m)) n) 1))
  (is (= (utils:with-lengths (n m) ('(1 2) '()) (declare (ignorable m)) n) 2))
  (is (= (utils:with-lengths (n m) ('(1 2) '(1)) (declare (ignorable m)) n) 2))
  (is (= (utils:with-lengths (n m) ('(1 2) '(1 2)) (declare (ignorable m)) n) 2))
  (is (= (utils:with-lengths (n m) ('(1 2) '(1 2 3)) (declare (ignorable m)) n) 2))
  (is (= (utils:with-lengths (n m) ('(1 2 3) '()) (declare (ignorable m)) n) 3))
  (is (= (utils:with-lengths (n m) ('(1 2 3) '(1)) (declare (ignorable m)) n) 3))
  (is (= (utils:with-lengths (n m) ('(1 2 3) '(1 2)) (declare (ignorable m)) n) 3))
  (is (= (utils:with-lengths (n m) ('(1 2 3) '(1 2 3)) (declare (ignorable m)) n) 3))
  (is (= (utils:with-lengths (n m) ('() '()) (declare (ignorable n)) m) 0))
  (is (= (utils:with-lengths (n m) ('(1) '()) (declare (ignorable n)) m) 0))
  (is (= (utils:with-lengths (n m) ('(1 2) '()) (declare (ignorable n)) m) 0))
  (is (= (utils:with-lengths (n m) ('(1 2 3) '()) (declare (ignorable n)) m) 0))
  (is (= (utils:with-lengths (n m) ('() '(1)) (declare (ignorable n)) m) 1))
  (is (= (utils:with-lengths (n m) ('(1) '(1)) (declare (ignorable n)) m) 1))
  (is (= (utils:with-lengths (n m) ('(1 2) '(1)) (declare (ignorable n)) m) 1))
  (is (= (utils:with-lengths (n m) ('(1 2 3) '(1)) (declare (ignorable n)) m) 1))
  (is (= (utils:with-lengths (n m) ('() '(1 2)) (declare (ignorable n)) m) 2))
  (is (= (utils:with-lengths (n m) ('(1) '(1 2)) (declare (ignorable n)) m) 2))
  (is (= (utils:with-lengths (n m) ('(1 2) '(1 2)) (declare (ignorable n)) m) 2))
  (is (= (utils:with-lengths (n m) ('(1 2 3) '(1 2)) (declare (ignorable n)) m) 2))
  (is (= (utils:with-lengths (n m) ('() '(1 2 3)) (declare (ignorable n)) m) 3))
  (is (= (utils:with-lengths (n m) ('(1) '(1 2 3)) (declare (ignorable n)) m) 3))
  (is (= (utils:with-lengths (n m) ('(1 2) '(1 2 3)) (declare (ignorable n)) m) 3))
  (is (= (utils:with-lengths (n m) ('(1 2 3) '(1 2 3)) (declare (ignorable n)) m) 3))
  ;; Invalid number of operands
  (signals error (eval '(utils:with-lengths () (nil) t)))
  (signals error (eval '(utils:with-lengths () ('(1 2 3)) t)))
  (signals error (eval '(utils:with-lengths (n) () t)))
  (signals error (eval '(utils:with-lengths (n m) ('(1 2 3)) t))))

(test s=
  (declare (notinline utils:s=))
  ;; Zero length
  (is-false (utils:s= '() -1))
  (is-false (utils:s= #() -1))
  (is-false (utils:s= "" -1))
  (is (utils:s= '() 0))
  (is (utils:s= #() 0))
  (is (utils:s= "" 0))
  (is-false (utils:s= '() 1))
  (is-false (utils:s= #() 1))
  (is-false (utils:s= "" 1))
  ;; Length 1
  (is-false (utils:s= '(1) 0))
  (is-false (utils:s= #(1) 0))
  (is-false (utils:s= "1" 0))
  (is (utils:s= '(1) 1))
  (is (utils:s= #(1) 1))
  (is (utils:s= "1" 1))
  (is-false (utils:s= '(1) 2))
  (is-false (utils:s= #(1) 2))
  (is-false (utils:s= "1" 2))
  ;; Length 2
  (is-false (utils:s= '(1 2) 1))
  (is-false (utils:s= #(1 2) 1))
  (is-false (utils:s= "12" 1))
  (is (utils:s= '(1 2) 2))
  (is (utils:s= #(1 2) 2))
  (is (utils:s= "12" 2))
  (is-false (utils:s= '(1 2) 3))
  (is-false (utils:s= #(1 2) 3))
  (is-false (utils:s= "12" 3))
  ;; Length 3
  (is-false (utils:s= '(1 2 3) 2))
  (is-false (utils:s= #(1 2 3) 2))
  (is-false (utils:s= "123" 2))
  (is (utils:s= '(1 2 3) 3))
  (is (utils:s= #(1 2 3) 3))
  (is (utils:s= "123" 3))
  (is-false (utils:s= '(1 2 3) 4))
  (is-false (utils:s= #(1 2 3) 4))
  (is-false (utils:s= "123" 4))
  ;; Length 4
  (is-false (utils:s= '(1 2 3 4) 3))
  (is-false (utils:s= #(1 2 3 4) 3))
  (is-false (utils:s= "1234" 3))
  (is (utils:s= '(1 2 3 4) 4))
  (is (utils:s= #(1 2 3 4) 4))
  (is (utils:s= "1234" 4))
  (is-false (utils:s= '(1 2 3 4) 5))
  (is-false (utils:s= #(1 2 3 4) 5))
  (is-false (utils:s= "1234" 5))
  ;; Is a function
  (is (identity (function utils:s=)))
  ;; Invalid argument
  (signals error (utils:s= 3 0)))

(test s>
  (declare (notinline utils:s>))
  ;; Zero length
  (is (utils:s> '() -1))
  (is (utils:s> #() -1))
  (is (utils:s> "" -1))
  (is-false (utils:s> '() 0))
  (is-false (utils:s> #() 0))
  (is-false (utils:s> "" 0))
  (is-false (utils:s> '() 1))
  (is-false (utils:s> #() 1))
  (is-false (utils:s> "" 1))
  ;; Length 1
  (is (utils:s> '(1) 0))
  (is (utils:s> #(1) 0))
  (is (utils:s> "1" 0))
  (is-false (utils:s> '(1) 1))
  (is-false (utils:s> #(1) 1))
  (is-false (utils:s> "1" 1))
  (is-false (utils:s> '(1) 2))
  (is-false (utils:s> #(1) 2))
  (is-false (utils:s> "1" 2))
  ;; Length 2
  (is (utils:s> '(1 2) 1))
  (is (utils:s> #(1 2) 1))
  (is (utils:s> "12" 1))
  (is-false (utils:s> '(1 2) 2))
  (is-false (utils:s> #(1 2) 2))
  (is-false (utils:s> "12" 2))
  (is-false (utils:s> '(1 2) 3))
  (is-false (utils:s> #(1 2) 3))
  (is-false (utils:s> "12" 3))
  ;; Length 3
  (is (utils:s> '(1 2 3) 1))
  (is (utils:s> #(1 2 3) 1))
  (is (utils:s> "123" 1))
  (is-false (utils:s> '(1 2 3) 3))
  (is-false (utils:s> #(1 2 3) 3))
  (is-false (utils:s> "123" 3))
  (is-false (utils:s> '(1 2 3) 4))
  (is-false (utils:s> #(1 2 3) 4))
  (is-false (utils:s> "123" 4))
  ;; Length 4
  (is (utils:s> '(1 2 3 4) 3))
  (is (utils:s> #(1 2 3 4) 3))
  (is (utils:s> "1234" 3))
  (is-false (utils:s> '(1 2 3 4) 4))
  (is-false (utils:s> #(1 2 3 4) 4))
  (is-false (utils:s> "1234" 4))
  (is-false (utils:s> '(1 2 3 4) 5))
  (is-false (utils:s> #(1 2 3 4) 5))
  (is-false (utils:s> "1234" 5))
  ;; Is a function
  (is (identity (function utils:s>)))
  ;; Invalid argument
  (signals error (utils:s> 3 0)))

(test s<
  (declare (notinline utils:s<))
  ;; Zero length
  (is-false (utils:s< '() -1))
  (is-false (utils:s< #() -1))
  (is-false (utils:s< "" -1))
  (is-false (utils:s< '() 0))
  (is-false (utils:s< #() 0))
  (is-false (utils:s< "" 0))
  (is (utils:s< '() 1))
  (is (utils:s< #() 1))
  (is (utils:s< "" 1))
  ;; Length 1
  (is-false (utils:s< '(1) 0))
  (is-false (utils:s< #(1) 0))
  (is-false (utils:s< "1" 0))
  (is-false (utils:s< '(1) 1))
  (is-false (utils:s< #(1) 1))
  (is-false (utils:s< "1" 1))
  (is (utils:s< '(1) 2))
  (is (utils:s< #(1) 2))
  (is (utils:s< "1" 2))
  ;; Length 2
  (is-false (utils:s< '(1 2) 1))
  (is-false (utils:s< #(1 2) 1))
  (is-false (utils:s< "12" 1))
  (is-false (utils:s< '(1 2) 2))
  (is-false (utils:s< #(1 2) 2))
  (is-false (utils:s< "12" 2))
  (is (utils:s< '(1 2) 3))
  (is (utils:s< #(1 2) 3))
  (is (utils:s< "12" 3))
  ;; Length 3
  (is-false (utils:s< '(1 2 3) 1))
  (is-false (utils:s< #(1 2 3) 1))
  (is-false (utils:s< "123" 1))
  (is-false (utils:s< '(1 2 3) 3))
  (is-false (utils:s< #(1 2 3) 3))
  (is-false (utils:s< "123" 3))
  (is (utils:s< '(1 2 3) 4))
  (is (utils:s< #(1 2 3) 4))
  (is (utils:s< "123" 4))
  ;; -falseLength 4
  (is-false (utils:s< '(1 2 3 4) 3))
  (is-false (utils:s< #(1 2 3 4) 3))
  (is-false (utils:s< "1234" 3))
  (is-false (utils:s< '(1 2 3 4) 4))
  (is-false (utils:s< #(1 2 3 4) 4))
  (is-false (utils:s< "1234" 4))
  (is (utils:s< '(1 2 3 4) 5))
  (is (utils:s< #(1 2 3 4) 5))
  (is (utils:s< "1234" 5))
  ;; Is a function
  (is (identity (function utils:s<)))
  ;; Invalid argument
  (signals error (utils:s< 3 0)))

(test s>=
  (declare (notinline utils:s>=))
  ;; Zero length
  (is (utils:s>= '() -1))
  (is (utils:s>= #() -1))
  (is (utils:s>= "" -1))
  (is (utils:s>= '() 0))
  (is (utils:s>= #() 0))
  (is (utils:s>= "" 0))
  (is-false (utils:s>= '() 1))
  (is-false (utils:s>= #() 1))
  (is-false (utils:s>= "" 1))
  ;; Length 1
  (is (utils:s>= '(1) 0))
  (is (utils:s>= #(1) 0))
  (is (utils:s>= "1" 0))
  (is (utils:s>= '(1) 1))
  (is (utils:s>= #(1) 1))
  (is (utils:s>= "1" 1))
  (is-false (utils:s>= '(1) 2))
  (is-false (utils:s>= #(1) 2))
  (is-false (utils:s>= "1" 2))
  ;; Length 2
  (is (utils:s>= '(1 2) 1))
  (is (utils:s>= #(1 2) 1))
  (is (utils:s>= "12" 1))
  (is (utils:s>= '(1 2) 2))
  (is (utils:s>= #(1 2) 2))
  (is (utils:s>= "12" 2))
  (is-false (utils:s>= '(1 2) 3))
  (is-false (utils:s>= #(1 2) 3))
  (is-false (utils:s>= "12" 3))
  ;; Length 3
  (is (utils:s>= '(1 2 3) 1))
  (is (utils:s>= #(1 2 3) 1))
  (is (utils:s>= "123" 1))
  (is (utils:s>= '(1 2 3) 3))
  (is (utils:s>= #(1 2 3) 3))
  (is (utils:s>= "123" 3))
  (is-false (utils:s>= '(1 2 3) 4))
  (is-false (utils:s>= #(1 2 3) 4))
  (is-false (utils:s>= "123" 4))
  ;; Length 4
  (is (utils:s>= '(1 2 3 4) 3))
  (is (utils:s>= #(1 2 3 4) 3))
  (is (utils:s>= "1234" 3))
  (is (utils:s>= '(1 2 3 4) 4))
  (is (utils:s>= #(1 2 3 4) 4))
  (is (utils:s>= "1234" 4))
  (is-false (utils:s>= '(1 2 3 4) 5))
  (is-false (utils:s>= #(1 2 3 4) 5))
  (is-false (utils:s>= "1234" 5))
  ;; Is a function
  (is (identity (function utils:s>=)))
  ;; Invalid argument
  (signals error (utils:s>= 3 0)))

(test s<=
  (declare (notinline utils:s<=))
  ;; Zero length
  (is-false (utils:s<= '() -1))
  (is-false (utils:s<= #() -1))
  (is-false (utils:s<= "" -1))
  (is (utils:s<= '() 0))
  (is (utils:s<= #() 0))
  (is (utils:s<= "" 0))
  (is (utils:s<= '() 1))
  (is (utils:s<= #() 1))
  (is (utils:s<= "" 1))
  ;; Length 1
  (is-false (utils:s<= '(1) 0))
  (is-false (utils:s<= #(1) 0))
  (is-false (utils:s<= "1" 0))
  (is (utils:s<= '(1) 1))
  (is (utils:s<= #(1) 1))
  (is (utils:s<= "1" 1))
  (is (utils:s<= '(1) 2))
  (is (utils:s<= #(1) 2))
  (is (utils:s<= "1" 2))
  ;; Length 2
  (is-false (utils:s<= '(1 2) 1))
  (is-false (utils:s<= #(1 2) 1))
  (is-false (utils:s<= "12" 1))
  (is (utils:s<= '(1 2) 2))
  (is (utils:s<= #(1 2) 2))
  (is (utils:s<= "12" 2))
  (is (utils:s<= '(1 2) 3))
  (is (utils:s<= #(1 2) 3))
  (is (utils:s<= "12" 3))
  ;; Length 3
  (is-false (utils:s<= '(1 2 3) 1))
  (is-false (utils:s<= #(1 2 3) 1))
  (is-false (utils:s<= "123" 1))
  (is (utils:s<= '(1 2 3) 3))
  (is (utils:s<= #(1 2 3) 3))
  (is (utils:s<= "123" 3))
  (is (utils:s<= '(1 2 3) 4))
  (is (utils:s<= #(1 2 3) 4))
  (is (utils:s<= "123" 4))
  ;; Length 4
  (is-false (utils:s<= '(1 2 3 4) 3))
  (is-false (utils:s<= #(1 2 3 4) 3))
  (is-false (utils:s<= "1234" 3))
  (is (utils:s<= '(1 2 3 4) 4))
  (is (utils:s<= #(1 2 3 4) 4))
  (is (utils:s<= "1234" 4))
  (is (utils:s<= '(1 2 3 4) 5))
  (is (utils:s<= #(1 2 3 4) 5))
  (is (utils:s<= "1234" 5))
  ;; Is a function
  (is (identity (function utils:s<=)))
  ;; Invalid argument
  (signals error (utils:s<= 3 0)))

(test remove-nth
  (is (equal (utils:remove-nth 0 '(1)) nil))
  (is (equal (utils:remove-nth 0 '(1 2)) '(2)))
  (is (equal (utils:remove-nth 1 '(1 2)) '(1))))
