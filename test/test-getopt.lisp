(in-suite utils)

(def-suite* getopt :in utils)

(test match-option
  (is-false (utils::match-option "" nil))
  (is-false (utils::match-option "-" nil))
  (is-false (utils::match-option "a" nil))
  (is-false (utils::match-option "-a" nil))
  (is-false (utils::match-option "--" nil))
  (is-false (utils::match-option "all" nil))
  (is-false (utils::match-option "--all" nil))
  (is-false (utils::match-option "" '((full ("f") :switch))))
  (is-false (utils::match-option "a" '((full ("f") :switch))))
  (is-false (utils::match-option "-a" '((full ("f") :switch))))
  (is-false (utils::match-option "--all" '((full ("full") :switch))))
  (is (equal (multiple-value-list (utils::match-option "-a" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(0 "a" nil "")))
  (is (equal (multiple-value-list (utils::match-option "-f" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(1 "f" nil "")))
  (is (equal (multiple-value-list (utils::match-option "-c" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(2 "c" nil "")))
  (is (equal (multiple-value-list (utils::match-option "-af" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(0 "a" nil "-f")))
  (is (equal (multiple-value-list (utils::match-option "-ac" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(0 "a" nil "-c")))
  (is (equal (multiple-value-list (utils::match-option "-fa" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(1 "f" nil "-a")))
  (is (equal (multiple-value-list (utils::match-option "-fc" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(1 "f" nil "-c")))
  (is (equal (multiple-value-list (utils::match-option "-ca" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(2 "c" nil "-a")))
  (is (equal (multiple-value-list (utils::match-option "-cf" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(2 "c" nil "-f")))
  (is (equal (multiple-value-list (utils::match-option "-afc" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(0 "a" nil "-fc")))
  (is (equal (multiple-value-list (utils::match-option "-acf" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(0 "a" nil "-cf")))
  (is (equal (multiple-value-list (utils::match-option "-fac" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(1 "f" nil "-ac")))
  (is (equal (multiple-value-list (utils::match-option "-fca" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(1 "f" nil "-ca")))
  (is (equal (multiple-value-list (utils::match-option "-caf" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(2 "c" nil "-af")))
  (is (equal (multiple-value-list (utils::match-option "-cfa" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(2 "c" nil "-fa")))
  (is (equal (multiple-value-list (utils::match-option "--all" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(0 "all" nil "")))
  (is (equal (multiple-value-list (utils::match-option "--full" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(1 "full" nil "")))
  (is (equal (multiple-value-list (utils::match-option "--count" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(2 "count" nil "")))
  (is (equal (multiple-value-list (utils::match-option "--all=x" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(0 "all" "x" "")))
  (is (equal (multiple-value-list (utils::match-option "--full=y" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(1 "full" "y" "")))
  (is (equal (multiple-value-list (utils::match-option "--count=z" '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument)))) '(2 "count" "z" ""))))

(test parse-options
  (let ((optdefs '((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument))))
    ;; No options
    (is (equal (utils::parse-options nil nil) '(nil nil)))
    (is (equal (utils::parse-options nil optdefs) '((nil nil nil) nil)))
    ;; Just arguments
    (is (equal (utils::parse-options '("a") optdefs) '((nil nil nil) ("a"))))
    (is (equal (utils::parse-options '("a" "f" "c") optdefs) '((nil nil nil) ("a" "f" "c"))))
    ;; Some short options
    (is (equal (utils::parse-options '("-a" "f" "c") optdefs) '((t nil nil) ("f" "c"))))
    (is (equal (utils::parse-options '("-f" "a" "c") optdefs) '((nil t nil) ("a" "c"))))
    (is (equal (utils::parse-options '("-c" "a" "f") optdefs) '((nil nil "a") ("f"))))
    (is (equal (utils::parse-options '("-a" "-f" "c") optdefs) '((t t nil) ("c"))))
    (is (equal (utils::parse-options '("-f" "-a" "c") optdefs) '((t t nil) ("c"))))
    (is (equal (utils::parse-options '("-c" "a" "-f") optdefs) '((nil t "a") ())))
    ;; Short option combination
    (is (equal (utils::parse-options '("-af" "-c" "3") optdefs) '((t t "3") ())))
    (is (equal (utils::parse-options '("-af" "-c" "3" "x" "y" "z") optdefs) '((t t "3") ("x" "y" "z"))))
    (is (equal (utils::parse-options '("-afc" "3" "x" "y" "z") optdefs) '((t t "3") ("x" "y" "z"))))
    ;; Long options
    (is (equal (utils::parse-options '("--all" "f" "c") optdefs) '((t nil nil) ("f" "c"))))
    (is (equal (utils::parse-options '("--full" "a" "c") optdefs) '((nil t nil) ("a" "c"))))
    (is (equal (utils::parse-options '("--count" "a" "f") optdefs) '((nil nil "a") ("f"))))
    (is (equal (utils::parse-options '("--all" "--full" "-c" "3") optdefs) '((t t "3") ())))
    (is (equal (utils::parse-options '("--count" "3" "x" "y" "z") optdefs) '((nil nil "3") ("x" "y" "z"))))
    (is (equal (utils::parse-options '("--all" "--full" "--count" "3") optdefs) '((t t "3") ())))
    (is (equal (utils::parse-options '("--all" "--full" "--count" "3" "z") optdefs) '((t t "3") ("z"))))
    (is (equal (utils::parse-options '("--count" "3" "-c" "2" "x" "y" "z") optdefs) '((nil nil "2") ("x" "y" "z"))))
    (is (equal (utils::parse-options '("-c" "3" "--count" "1" "x" "y" "z") optdefs) '((nil nil "1") ("x" "y" "z"))))
    ;; Missing argument
    (signals error (utils::parse-options '("-c") optdefs))
    (signals error (utils::parse-options '("-c" "-a") optdefs))
    (signals error (utils::parse-options '("-c" "a" "-c") optdefs))
    (signals error (utils::parse-options '("-ac") optdefs))
    (signals error (utils::parse-options '("-acf") optdefs))
    ;; Unknown option
    (signals error (utils::parse-options '("-x") optdefs))
    (signals error (utils::parse-options '("--foo") optdefs))
    (signals error (utils::parse-options '("-a -f -x") optdefs))
    (signals error (utils::parse-options '("--all --full --foo") optdefs))))

(test with-command-line-options
  (let ((sb-ext:*posix-argv* '("sbcl" "-a" "-c" "3" "--full")))
    (is (utils:with-command-line-options ((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument) (delete ("d" "delete") :switch)) args all))
    (is (utils:with-command-line-options ((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument) (delete ("d" "delete") :switch)) args full))
    (is-false (utils:with-command-line-options ((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument) (delete ("d" "delete") :switch)) args delete))
    (is (string= (utils:with-command-line-options ((all ("a" "all") :switch) (full ("f" "full") :switch) (count ("c" "count") :argument) (delete ("d" "delete") :switch)) args count) "3"))))
